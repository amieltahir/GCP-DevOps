- name: Set up Jumphost and HTTP Load Balancer with Managed Instance Group
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    project_id: qwiklabs-gcp-02-84d262accd9a
    zone: us-west4-c
    region: us-west4
    template_name: web-server-template
    instance_group: webserver-group
    startup_script: |
      #! /bin/bash
      apt-get update
      apt-get install -y nginx
      service nginx start
      HOSTNAME=$(hostname)
      sed -i "s/Welcome to nginx!/Google Cloud Platform - $HOSTNAME/" /var/www/html/index.nginx-debian.html
    reserved_ip: lb-ipv4-1
    backend_service: global-backend-service
    health_check: global-health-check
    url_map: global-url-map
    proxy: global-http-proxy
    forwarding_rule: global-forwarding-rule

  tasks:
    - name: Set GCP project
      shell: gcloud config set project {{ project_id }}
      register: set_project
      changed_when: "'Updated property' in set_project.stdout"
    - debug:
        msg: "{{ set_project.stdout }}"

    - name: Set GCP compute zone
      shell: gcloud config set compute/zone {{ zone }}
      register: set_zone
      changed_when: "'Updated property' in set_zone.stdout"
    - debug:
        msg: "{{ set_zone.stdout }}"

    - name: Create jumphost instance
      command: >
        gcloud compute instances create nucleus-jumphost-546
        --zone={{ zone }}
        --machine-type=e2-micro
        --image-family=debian-11
        --image-project=debian-cloud
        --network=default
      register: jumphost
    - debug:
        msg: "{{ jumphost.stdout }}"

    - name: Write startup script to file
      copy:
        content: "{{ startup_script }}"
        dest: ./startup.sh
        mode: '0755'

    - name: Create instance template
      command: >
        gcloud compute instance-templates create {{ template_name }}
        --machine-type=e2-medium
        --image-family=debian-11
        --image-project=debian-cloud
        --tags=allow-health-check
        --network=default
        --metadata-from-file startup-script=./startup.sh
      register: template
    - debug:
        msg: "{{ template.stdout }}"

    - name: Create managed instance group
      command: >
        gcloud compute instance-groups managed create {{ instance_group }}
        --base-instance-name=web-server
        --template={{ template_name }}
        --size=2
        --zone={{ zone }}
      register: mig
    - debug:
        msg: "{{ mig.stdout }}"

    - name: Create firewall rule
      command: >
        gcloud compute firewall-rules create grant-tcp-rule-674
        --direction=INGRESS
        --priority=1000
        --network=default
        --action=ALLOW
        --rules=tcp:80
        --source-ranges=0.0.0.0/0
        --target-tags=allow-health-check
      register: firewall
    - debug:
        msg: "{{ firewall.stdout }}"

    - name: Create health check
      command: >
        gcloud compute health-checks create http {{ health_check }}
        --port 80
      register: health
    - debug:
        msg: "{{ health.stdout }}"

    - name: Reserve global static IP
      command: >
        gcloud compute addresses create {{ reserved_ip }}
        --ip-version=IPV4
        --global
      register: reserve_ip
      ignore_errors: true
    - debug:
        msg: "{{ reserve_ip.stdout | default('Already exists or skipped') }}"

    - name: Get global IP address
      command: >
        gcloud compute addresses describe {{ reserved_ip }}
        --format="get(address)"
        --global
      register: lb_ip_result
    - debug:
        msg: "Load balancer IP: {{ lb_ip_result.stdout }}"

    - name: Create backend service
      command: >
        gcloud compute backend-services create {{ backend_service }}
        --protocol=HTTP
        --health-checks={{ health_check }}
        --port-name=http
        --global
      register: backend
    - debug:
        msg: "{{ backend.stdout }}"

    - name: Set named ports on MIG
      command: >
        gcloud compute instance-groups managed set-named-ports {{ instance_group }}
        --named-ports=http:80
        --zone={{ zone }}
      register: named_ports
    - debug:
        msg: "{{ named_ports.stdout }}"

    - name: Add backend to backend service
      command: >
        gcloud compute backend-services add-backend {{ backend_service }}
        --instance-group={{ instance_group }}
        --instance-group-zone={{ zone }}
        --global
      register: backend_add
    - debug:
        msg: "{{ backend_add.stdout }}"

    - name: Create URL map
      command: >
        gcloud compute url-maps create {{ url_map }}
        --default-service={{ backend_service }}
      register: urlmap
    - debug:
        msg: "{{ urlmap.stdout }}"

    - name: Create target HTTP proxy
      command: >
        gcloud compute target-http-proxies create {{ proxy }}
        --url-map={{ url_map }}
      register: proxy_create
      ignore_errors: true
    - debug:
        msg: "{{ proxy_create.stdout | default('Proxy already exists or failed gracefully') }}"

    - name: Create forwarding rule
      command: >
        gcloud compute forwarding-rules create {{ forwarding_rule }}
        --address={{ reserved_ip }}
        --global
        --target-http-proxy={{ proxy }}
        --ports=80
      register: fwd_rule
      ignore_errors: true
    - debug:
        msg: "{{ fwd_rule.stdout | default('Forwarding rule already exists or failed gracefully') }}"

    - name: Wait for propagation
      pause:
        seconds: 30

    - name: Curl the load balancer IP to test
      command: curl -s http://{{ lb_ip_result.stdout }}
      register: curl_test

    - name: Show curl output
      debug:
        var: curl_test.stdout
