---
- name: GCP: Set up Jumphost and HTTP Load Balancer with Managed Instance Group
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    project_id: YOUR_PROJECT_ID_HERE
    zone: us-east1-b
    region: us-east1
    template_name: global-template
    instance_group: global-mig
    startup_script: |
      #! /bin/bash
      apt-get update
      apt-get install -y nginx
      service nginx start
      HOSTNAME=$(hostname)
      sed -i "s/Welcome to nginx!/Google Cloud Platform - $HOSTNAME/" /var/www/html/index.nginx-debian.html
    reserved_ip: lb-ipv4-1
    backend_service: global-backend-service
    health_check: global-health-check
    url_map: global-url-map
    proxy: global-http-proxy
    forwarding_rule: global-forwarding-rule

  tasks:
    - name: Create jumphost instance
      command: >
        gcloud compute instances create nucleus-jumphost-198
        --zone={{ zone }}
        --machine-type=e2-micro
        --image-family=debian-11
        --image-project=debian-cloud
      register: jumphost

    - debug:
        var: jumphost.stdout_lines

    - name: Write startup script to file
      copy:
        content: "{{ startup_script }}"
        dest: ./startup.sh
        mode: '0755'

    - name: Create instance template
      command: >
        gcloud compute instance-templates create {{ template_name }}
        --machine-type=e2-medium
        --image-family=debian-11
        --image-project=debian-cloud
        --tags=allow-health-check
        --metadata-from-file startup-script=./startup.sh
      register: template

    - debug:
        var: template.stdout_lines

    - name: Create managed instance group
      command: >
        gcloud compute instance-groups managed create {{ instance_group }}
        --base-instance-name=web-server
        --template={{ template_name }}
        --size=2
        --zone={{ zone }}
      register: mig

    - debug:
        var: mig.stdout_lines

    - name: Create firewall rule
      command: >
        gcloud compute firewall-rules create permit-tcp-rule-123
        --direction=INGRESS
        --priority=1000
        --network=default
        --action=ALLOW
        --rules=tcp:80
        --source-ranges=0.0.0.0/0
        --target-tags=allow-health-check
      register: firewall

    - debug:
        var: firewall.stdout_lines

    - name: Create health check
      command: >
        gcloud compute health-checks create http {{ health_check }}
        --port 80
      register: health

    - debug:
        var: health.stdout_lines

    - name: Reserve global static IP
      command: >
        gcloud compute addresses create {{ reserved_ip }}
        --ip-version=IPV4
        --global
      register: reserve_ip
      ignore_errors: true

    - debug:
        var: reserve_ip.stdout_lines

    - name: Get global IP address
      command: >
        gcloud compute addresses describe {{ reserved_ip }}
        --format="get(address)"
        --global
      register: lb_ip_result

    - debug:
        var: lb_ip_result.stdout

    - name: Create backend service
      command: >
        gcloud compute backend-services create {{ backend_service }}
        --protocol=HTTP
        --health-checks={{ health_check }}
        --port-name=http
        --global
      register: backend

    - debug:
        var: backend.stdout_lines

    - name: Set named ports on MIG
      command: >
        gcloud compute instance-groups managed set-named-ports {{ instance_group }}
        --named-ports=http:80
        --zone={{ zone }}
      register: named_ports

    - debug:
        var: named_ports.stdout_lines

    - name: Add backend to backend service
      command: >
        gcloud compute backend-services add-backend {{ backend_service }}
        --instance-group={{ instance_group }}
        --instance-group-zone={{ zone }}
        --global
      register: backend_add

    - debug:
        var: backend_add.stdout_lines

    - name: Create URL map
      command: >
        gcloud compute url-maps create {{ url_map }}
        --default-service={{ backend_service }}
      register: urlmap

    - debug:
        var: urlmap.stdout_lines

    - name: Create target HTTP proxy
      command: >
        gcloud compute target-http-proxies create {{ proxy }}
        --url-map={{ url_map }}
      register: proxy_create
      ignore_errors: true

    - debug:
        var: proxy_create.stdout_lines

    - name: Create forwarding rule
      command: >
        gcloud compute forwarding-rules create {{ forwarding_rule }}
        --address={{ reserved_ip }}
        --global
        --target-http-proxy={{ proxy }}
        --ports=80
      register: fwd_rule
      ignore_errors: true

    - debug:
        var: fwd_rule.stdout_lines

    - name: Wait for propagation
      pause:
        seconds: 30

    - name: Curl the load balancer IP to test
      command: curl -s http://{{ lb_ip_result.stdout }}
      register: curl_test

    - debug:
        var: curl_test.stdout
